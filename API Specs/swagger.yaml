swagger: "2.0"
info:
  description: "This is a sample server NailedOM server. For this sample, you can use the api key `special-key` to test the authorization filters."
  version: "0.1"
  title: "Swagger NailedOM"
  termsOfService: "http://swagger.io/terms/"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:5000"
basePath: "/api"
tags:
- name: "product"
  description: "Global feedback service about products."
- name: "feedback"
  description: "Access to NailedOM feedbacks"
- name: "user"
  description: "Operations about user"
schemes:
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
        405:
          description: "Invalid input"
      security:
      - nailedom_auth:
        - "write:feedback"
        - "read:feedback"
  /user/signin:
    options:
      responses:
        default:
          description: ""
          headers:
            Access-Control-Allow-Origin:
              type: string
              default: "*"
              description: ""
            Access-Control-Allow-Headers:
              type: string
              default: X-UA-Compatible, X-XSS-Protection
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "Sign In User"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The user object for login"
        required: true
        schema:
          $ref: "#/definitions/SignIn"
      responses:
        default:
          description: ""
          headers:
            Access-Control-Allow-Origin:
              type: string
              default: "*"
              description: ""
            Access-Control-Allow-Headers:
              type: string
              default: X-UA-Compatible, X-XSS-Protection
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SignInResponse"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
      - nailedom_auth:
        - "write:feedback"
        - "read:feedback"
  /user/signout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "Get user by user Id"
      description: ""
      operationId: "getUserById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid user Id supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "Id that need to be updated"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The Id that needs to be deleted"
        required: true
        type: "integer"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  nailedom_auth:
    type: "oauth2"
    authorizationUrl: "http://localhost:5000/oauth/authorize"
    flow: "implicit"
    scopes:
      write:feedback: "modify feedback in your account"
      read:feedback: "read your feedback"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  SignIn:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  SignInResponse:
    type: "object"
    properties:
      token:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"